}
ff$SamplingStrategy <- ifelse(ff$SamplingStrategy == "Warning", "Baseline surveillance", ff$SamplingStrategy)
ff$Gender <- "unknown"
ff$Age <- "unknown"
ff$Status <- "unknown"
ff$SpecimenSource <- "unknown"
ff$Outbreak <- ""
ff$lastVaccinated <- ""
ff$Treatment <- ""
ff$SequencingTechnology <- ifelse(ff$PlatePlatform == "Nanopore", "Oxford Nanopore",
ifelse(ff$PlatePlatform == "Illumina", "Illumina MiSeq", "Unknown"))
unknown_tech <- filter(ff, SequencingTechnology == "Unknown")
if (nrow(unknown_tech) != 0){
stop("Check Sequencing Technology options.")
}
ff$AssemblyMethod <- ifelse(ff$PlatePlatform == "Nanopore", "ARTIC Network pipeline",
ifelse(ff$PlatePlatform == "Illumina", "BWA-MEM, iVar", "Unknown"))
unknown_assembly <- filter(ff, AssemblyMethod == "Unknown")
if (nrow(unknown_assembly) != 0){
stop("Check Assembly Method options.")
}
### Coverage
ff$Coverage <- ""
ff <- ff %>% mutate(originlab = case_when(received_source == "CDCIVY" ~ "IVY3 Central Lab, Vanderbilt University Medical Center",
received_source == "CDCIVY4" ~ "IVY4 Central Lab, Vanderbilt University Medical Center",
received_source == "RVTN" ~ "Vanderbilt University Medical Center",
T ~ "University of Michigan Clinical Microbiology Laboratory"),
originlabaddress = case_when(received_source == "CDCIVY" ~ "Medical Center North D7240, 1161 21st Ave. S., Nashville, TN, USA",
received_source == "CDCIVY4" ~ "Medical Center North D7240, 1161 21st Ave. S., Nashville, TN, USA",
received_source == "RVTN" ~ "Medical Center North CC303, 1161 21st Ave. S., Nashville, TN, USA",
T ~ "2800 Plymouth Rd, Ann Arbor, MI, USA"))
ff$originlabsampleid <- ""
### submitting Lab
ff$submitlab <- "Lauring Lab, University of Michigan, Department of Microbiology and Immunology"
ff$submitlabaddress <- "1137 Catherine Street, Ann Arbor, MI, USA"
ff$submitlabsampleid <- ""
### Authors
ff$authors <- "Gilbert"
ff$comment <- ""
ff$commenticon <- ""
ff_crosswalk <- ff %>% select(sample_id, VirusName)
write.csv(ff_crosswalk, paste0(starting_path, "/SEQUENCING/SARSCOV2/3_ProcessedGenomes/", plate_datef, "_SC2_", runtech, "_Run_", runnum, "/", plate_datef, "_SC2_", runtech, "_Run_", runnum, ".forgisaid.meta.csv"), row.names = FALSE, na = "")
## select variables
ff_writeout <- ff %>% select(Submitter, FASTAfilename, VirusName,Type, Passage,  coll_date, Location,
AdditionalLoc, Host, AdditionalHost, SamplingStrategy, Gender, Age, Status,
SpecimenSource, Outbreak, lastVaccinated, Treatment, SequencingTechnology,
AssemblyMethod, Coverage, originlab, originlabaddress, originlabsampleid,
submitlab, submitlabaddress, submitlabsampleid, authors,
comment, commenticon)
ff_writeout <- ff_writeout %>% distinct()
## gisaid upload file name
today <- current_date_string()
gufn <- paste0(today, "_Lauring_gisaid_upload_metadata_run_", runnum)
## write to excel file (follow format)
wb <- loadWorkbook(paste0(starting_path, "/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/SequenceOutcomes/gisaid/GISAID_UPLOAD_TEMPLATE2.xlsx"))
# fill in the submissions tab with built data frame
writeData(wb, ff_writeout, sheet = "Submissions", startRow = 3, startCol = 1, colNames = FALSE)
saveWorkbook(wb, paste0(outputLOC, gufn, ".xlsx"), overwrite = TRUE)
source(paste0(code_path, "manifest_code.R"))
################################################################################
#         Creation of Manifest Dataset for COVID-19 Genetic Sampling           #
#                           Created: 05/28/2021                                #
#                 Code Edited By: Julie (Jules) Gilbert                        #
################################################################################
library(tidyverse)
library(lubridate)
library(janitor)
library(openxlsx)
library(withr)
################################################################################
#                Manifest Files - Upload and Data Checks                       #
################################################################################
# Manifest file paths (there should be a path per source)
cbr_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/CBR")
uhs_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/UHS")
martin_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/Martin")
cstp_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/CSTP")
edidnow_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/EDIDNOW")
cdcivy_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/CDCIVY")
rvtn_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/RVTN")
henryford_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/HENRYFORD")
puimisc_manifest_fp <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/PUIMISC")
manifest_folder_list <- c(cbr_manifest_fp, uhs_manifest_fp, martin_manifest_fp, cstp_manifest_fp,
edidnow_manifest_fp, henryford_manifest_fp, puimisc_manifest_fp)
### output location of manifest files, all together
outputLOC <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/ManifestsComplete")
# each manifest provider will have their own folder, with all files inside
# don't want to re-build the entire thing every time, so will eventually need a
# system that only pulls in the newest information, but the first pass of this
# code will create the full set
# when "newest" added, create output text file report with # new items added
# any warnings (duplicates) should also print there
################################################################################
manifest_storage <- data.frame()
#duplicate_ssc <- data.frame()
# will iterate through folders
for (each_folder in manifest_folder_list){
### get names of all .csv files in folder
file_list <- list.files(pattern = "*.csv", path = each_folder)
if (length(file_list) != 0){
# then iterate through files within each folder
for (each_file in file_list){
#print(each_file)
# read in the file
file_in <- read.csv(paste0(each_folder, "/", each_file), colClasses = "character")
file_in <- file_in[, c(1:5)]
# turn any "" or " " into NA
file_in[file_in == ""] <- NA
file_in[file_in == " "] <- NA
# remove any empty rows that may come in
file_in <- remove_empty(file_in, which = "rows")
# check for column names: position, sample_id, subject_id, coll_date, flag
column_name_check <- colnames(file_in)
true_columns <- c("position", "sample_id", "subject_id", "coll_date", "flag")
if (identical(true_columns, column_name_check)){
## then do nothing
x <- 0
} else {
if (ncol(file_in) == 5){
colnames(file_in) <- true_columns
} else {
# find out which column is missing
whatsdifferent <- setdiff(true_columns, column_name_check)
print(whatsdifferent)
print("There is a column difference in")
print(each_file)
stop()
}
}
# check that sample_id, subject_id, and coll_date are all filled in
if(any(is.na(file_in$sample_id))){
print(each_file)
stop("There are missing sample ids.")
}
if(any(is.na(file_in$subject_id))){
print(each_file)
stop("There are missing subject ids.")
}
#check character count of date
# character_count_date <- unique(nchar(as.character(file_in$coll_date)))
#
# if (character_count_date == 8){
#   print("dates in expected format")
#   print(each_file)
# } else {
#   print("dates in full year format")
#   print(each_file)
# }
## reformat coll_date to YYYY-MM-DD format if necessary
test_date_format <- substr(as.character(file_in[1, 4]), 1, 4)
#print(test_date_format)
if (is.na(as.numeric(test_date_format))){
#a <- file_in$coll_date
file_in$coll_date <- as.POSIXct(file_in$coll_date, format = "%m/%d/%y")
}
if(any(is.na(file_in$coll_date))){
print(each_file)
print("There are missing collection dates.")
## fill the missings with current date, and edit flag
file_in <- file_in %>% mutate(flag = case_when(is.na(coll_date) ~ gsub("NA", "", paste0(flag, "Missing Date in Manifest - Replaced with Today Date")),
T ~ flag),
coll_date = case_when(is.na(coll_date) ~ as.character(Sys.Date()),
T ~ as.character(coll_date)))
}
# add in 2 new columns: received_date and received_source (from file name)
file_in$received_date <- date_from_file(each_file)
rec_source <- trimws(as.character(strsplit(each_file, "_")[[1]][1]))
file_in$received_source <- rec_source
# bind all rows together
manifest_storage <- rbind(manifest_storage, file_in)
}
### select only distinct rows
manifest_storage <- manifest_storage %>% distinct()
} else {
print(paste0("No files in folder = ", each_folder))
}
}
manifest_storage$coll_date <- as.character(manifest_storage$coll_date)
# read in cdc ivy site code list
cdc_sites <- read.csv(paste0(cdcivy_manifest_fp, "/Keys/CDC_SiteCodebook.csv"), colClasses = "character")
cdc_file_list <- list.files(pattern = "*.xlsx", path = cdcivy_manifest_fp)
cdc_ivy_storage <- data.frame()
full_ivy <- data.frame()
full_ivy4 <- data.frame()
for (each_file in cdc_file_list){
if (grepl("CDCIVY4", each_file)){
#print("IVY4")
#print(each_file)
fileone <- read.xlsx(paste0(cdcivy_manifest_fp, "/", each_file), sheet = 1, detectDates = TRUE)
fileone <- filter(fileone, !is.na(as.numeric(`Position.#`)))
## change all column names to lowercase and remove leading/lagging white space
## to make it easier to process
cdc_names <- colnames(fileone)
new_names <- c()
for (i in cdc_names){
new_names <- c(new_names, tolower(trimws(i)))
}
colnames(fileone) <- new_names
## keep full set of cdc ivy rows separate, for back checks on full data
full_ivy4 <- rbind(full_ivy4, fileone)
fileone <- fileone %>% select(`position.#`, study.id, collection.date, aliquot.id)
colnames(fileone) <- c("position", "subject_id", "coll_date", "sample_id")
fileone$subject_id <- trimws(fileone$subject_id)
fileone$subject_id <- as.numeric(fileone$subject_id)
fileone$coll_date <- as.character(fileone$coll_date)
fileone <- fileone %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- fileone %>% select(subject_id, sample_id) %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- merge(check_site_codes, cdc_sites, by.x = c("site_number"), by.y = c("Number"), all.x = TRUE)
if(any(is.na(check_site_codes$Institution))){
print(each_file)
stop("No Site Numerical Match")
}
site_bit <- cdc_sites %>% select(Number, SiteCode)
colnames(site_bit) <- c("Number", "SiteName")
fileone <- merge(fileone, site_bit, by.x = c("site_number"), by.y = c("Number"))
fileone$received_date <- date_from_file(each_file)
rec_source <- trimws(as.character(strsplit(each_file, "_")[[1]][1]))
fileone$received_source <- rec_source
### add in "regular" manifest columns
fileone$flag <- NA
### re-arrange variables
fileone <- fileone %>% select(position, sample_id, subject_id, coll_date, flag, received_date, received_source, SiteName)
} else {
#print("IVY")
#print(each_file)
fileone <- read.xlsx(paste0(cdcivy_manifest_fp, "/", each_file), sheet = 1, detectDates = TRUE)
fileone <- filter(fileone, !is.na(as.numeric(`Position.#`)))
## change all column names to lowercase and remove leading/lagging white space
## to make it easier to process
cdc_names <- colnames(fileone)
new_names <- c()
for (i in cdc_names){
new_names <- c(new_names, tolower(trimws(i)))
}
colnames(fileone) <- new_names
#print(colnames(fileone))
#fileone <- fileone[, c(1:13)]
#fileone <- janitor::remove_empty(fileone, which = "cols")
## keep full set of cdc ivy rows separate, for back checks on full data
full_ivy <- rbind(full_ivy, fileone)
fileone <- fileone %>% select(`position.#`, site.name, study.id, collection.date, aliquot.id)
colnames(fileone) <- c("position", "SiteName", "subject_id", "coll_date", "sample_id")
fileone$subject_id <- trimws(fileone$subject_id)
fileone$coll_date <- as.character(fileone$coll_date)
### site name checks
fileone$SiteName_check <- ifelse(fileone$SiteName %in% cdc_sites$SiteCode, 0, 1)
if (sum(fileone$SiteName_check, na.rm = TRUE) != 0){
print(each_file)
stop("There are incorrect site names in the manifest.")
} else {
fileone <- fileone %>% select(position, SiteName, subject_id, coll_date, sample_id)
}
#### additional check --- numbers to sites
### set of subject_id, sample_id, SiteName;
check_site_codes <- fileone %>% select(subject_id, sample_id, SiteName) %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- merge(check_site_codes, cdc_sites, by.x = c("site_number"), by.y = c("Number"), all.x = TRUE)
if(any(is.na(check_site_codes$Institution))){
print(each_file)
stop("No Site Numerical Match")
}
check_site_codes$mismatch_sites <- ifelse(check_site_codes$SiteName != check_site_codes$SiteCode, 1, 0)
if(any(check_site_codes$mismatch_sites == 1)){
print(each_file)
print(filter(check_site_codes, mismatch_sites == 1))
print("Mismatched site code to name")
}
# add in 2 new columns: received_date and received_source (from file name)
#rec_date <- trimws(as.character(strsplit(each_file, "_")[[1]][2]))
#rec_date <- paste0(substr(rec_date, 1, 4), "-", substr(rec_date, 5, 6), "-", substr(rec_date, 7, 8))
fileone$received_date <- date_from_file(each_file)
rec_source <- trimws(as.character(strsplit(each_file, "_")[[1]][1]))
fileone$received_source <- rec_source
### add in "regular" manifest columns
fileone$flag <- NA
### re-arrange variables
fileone <- fileone %>% select(position, sample_id, subject_id, coll_date, flag, received_date, received_source, SiteName)
}
cdc_ivy_storage <- rbind(cdc_ivy_storage, fileone)
}
each_file
cdc_ivy_storage <- data.frame()
full_ivy <- data.frame()
full_ivy4 <- data.frame()
for (each_file in cdc_file_list){
if (grepl("CDCIVY4", each_file)){
#print("IVY4")
#print(each_file)
fileone <- read.xlsx(paste0(cdcivy_manifest_fp, "/", each_file), sheet = 1, detectDates = TRUE)
fileone <- filter(fileone, !is.na(as.numeric(`Position.#`)))
## change all column names to lowercase and remove leading/lagging white space
## to make it easier to process
cdc_names <- colnames(fileone)
new_names <- c()
for (i in cdc_names){
new_names <- c(new_names, tolower(trimws(i)))
}
colnames(fileone) <- new_names
## keep full set of cdc ivy rows separate, for back checks on full data
full_ivy4 <- rbind(full_ivy4, fileone)
fileone <- fileone %>% select(`position.#`, study.id, collection.date, aliquot.id)
colnames(fileone) <- c("position", "subject_id", "coll_date", "sample_id")
fileone$subject_id <- trimws(fileone$subject_id)
fileone$subject_id <- as.numeric(fileone$subject_id)
fileone$coll_date <- as.character(fileone$coll_date)
fileone <- fileone %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- fileone %>% select(subject_id, sample_id) %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- merge(check_site_codes, cdc_sites, by.x = c("site_number"), by.y = c("Number"), all.x = TRUE)
if(any(is.na(check_site_codes$Institution))){
print(each_file)
stop("No Site Numerical Match")
}
site_bit <- cdc_sites %>% select(Number, SiteCode)
colnames(site_bit) <- c("Number", "SiteName")
fileone <- merge(fileone, site_bit, by.x = c("site_number"), by.y = c("Number"))
fileone$received_date <- date_from_file(each_file)
rec_source <- trimws(as.character(strsplit(each_file, "_")[[1]][1]))
fileone$received_source <- rec_source
### add in "regular" manifest columns
fileone$flag <- NA
### re-arrange variables
fileone <- fileone %>% select(position, sample_id, subject_id, coll_date, flag, received_date, received_source, SiteName)
} else {
#print("IVY")
#print(each_file)
fileone <- read.xlsx(paste0(cdcivy_manifest_fp, "/", each_file), sheet = 1, detectDates = TRUE)
fileone <- filter(fileone, !is.na(as.numeric(`Position.#`)))
## change all column names to lowercase and remove leading/lagging white space
## to make it easier to process
cdc_names <- colnames(fileone)
new_names <- c()
for (i in cdc_names){
new_names <- c(new_names, tolower(trimws(i)))
}
colnames(fileone) <- new_names
#print(colnames(fileone))
#fileone <- fileone[, c(1:13)]
#fileone <- janitor::remove_empty(fileone, which = "cols")
## keep full set of cdc ivy rows separate, for back checks on full data
full_ivy <- rbind(full_ivy, fileone)
fileone <- fileone %>% select(`position.#`, site.name, study.id, collection.date, aliquot.id)
colnames(fileone) <- c("position", "SiteName", "subject_id", "coll_date", "sample_id")
fileone$subject_id <- trimws(fileone$subject_id)
fileone$coll_date <- as.character(fileone$coll_date)
### site name checks
fileone$SiteName_check <- ifelse(fileone$SiteName %in% cdc_sites$SiteCode, 0, 1)
if (sum(fileone$SiteName_check, na.rm = TRUE) != 0){
print(each_file)
stop("There are incorrect site names in the manifest.")
} else {
fileone <- fileone %>% select(position, SiteName, subject_id, coll_date, sample_id)
}
#### additional check --- numbers to sites
### set of subject_id, sample_id, SiteName;
check_site_codes <- fileone %>% select(subject_id, sample_id, SiteName) %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- merge(check_site_codes, cdc_sites, by.x = c("site_number"), by.y = c("Number"), all.x = TRUE)
if(any(is.na(check_site_codes$Institution))){
print(each_file)
stop("No Site Numerical Match")
}
check_site_codes$mismatch_sites <- ifelse(check_site_codes$SiteName != check_site_codes$SiteCode, 1, 0)
if(any(check_site_codes$mismatch_sites == 1)){
print(each_file)
print(filter(check_site_codes, mismatch_sites == 1))
print("Mismatched site code to name")
}
# add in 2 new columns: received_date and received_source (from file name)
#rec_date <- trimws(as.character(strsplit(each_file, "_")[[1]][2]))
#rec_date <- paste0(substr(rec_date, 1, 4), "-", substr(rec_date, 5, 6), "-", substr(rec_date, 7, 8))
fileone$received_date <- date_from_file(each_file)
rec_source <- trimws(as.character(strsplit(each_file, "_")[[1]][1]))
fileone$received_source <- rec_source
### add in "regular" manifest columns
fileone$flag <- NA
### re-arrange variables
fileone <- fileone %>% select(position, sample_id, subject_id, coll_date, flag, received_date, received_source, SiteName)
}
cdc_ivy_storage <- rbind(cdc_ivy_storage, fileone)
}
# read in cdc ivy site code list
cdc_sites <- read.csv(paste0(cdcivy_manifest_fp, "/Keys/CDC_SiteCodebook.csv"), colClasses = "character")
cdc_file_list <- list.files(pattern = "*.xlsx", path = cdcivy_manifest_fp)
cdc_ivy_storage <- data.frame()
full_ivy <- data.frame()
full_ivy4 <- data.frame()
for (each_file in cdc_file_list){
if (grepl("CDCIVY4", each_file)){
#print("IVY4")
#print(each_file)
fileone <- read.xlsx(paste0(cdcivy_manifest_fp, "/", each_file), sheet = 1, detectDates = TRUE)
fileone <- filter(fileone, !is.na(as.numeric(`Position.#`)))
## change all column names to lowercase and remove leading/lagging white space
## to make it easier to process
cdc_names <- colnames(fileone)
new_names <- c()
for (i in cdc_names){
new_names <- c(new_names, tolower(trimws(i)))
}
colnames(fileone) <- new_names
## keep full set of cdc ivy rows separate, for back checks on full data
full_ivy4 <- rbind(full_ivy4, fileone)
fileone <- fileone %>% select(`position.#`, study.id, collection.date, aliquot.id)
colnames(fileone) <- c("position", "subject_id", "coll_date", "sample_id")
fileone$subject_id <- trimws(fileone$subject_id)
fileone$subject_id <- as.numeric(fileone$subject_id)
fileone$coll_date <- as.character(fileone$coll_date)
fileone <- fileone %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- fileone %>% select(subject_id, sample_id) %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- merge(check_site_codes, cdc_sites, by.x = c("site_number"), by.y = c("Number"), all.x = TRUE)
if(any(is.na(check_site_codes$Institution))){
print(each_file)
stop("No Site Numerical Match")
}
site_bit <- cdc_sites %>% select(Number, SiteCode)
colnames(site_bit) <- c("Number", "SiteName")
fileone <- merge(fileone, site_bit, by.x = c("site_number"), by.y = c("Number"))
fileone$received_date <- date_from_file(each_file)
rec_source <- trimws(as.character(strsplit(each_file, "_")[[1]][1]))
fileone$received_source <- rec_source
### add in "regular" manifest columns
fileone$flag <- NA
### re-arrange variables
fileone <- fileone %>% select(position, sample_id, subject_id, coll_date, flag, received_date, received_source, SiteName)
} else {
#print("IVY")
#print(each_file)
fileone <- read.xlsx(paste0(cdcivy_manifest_fp, "/", each_file), sheet = 1, detectDates = TRUE)
fileone <- filter(fileone, !is.na(as.numeric(`Position.#`)))
## change all column names to lowercase and remove leading/lagging white space
## to make it easier to process
cdc_names <- colnames(fileone)
new_names <- c()
for (i in cdc_names){
new_names <- c(new_names, tolower(trimws(i)))
}
colnames(fileone) <- new_names
#print(colnames(fileone))
#fileone <- fileone[, c(1:13)]
#fileone <- janitor::remove_empty(fileone, which = "cols")
## keep full set of cdc ivy rows separate, for back checks on full data
full_ivy <- rbind(full_ivy, fileone)
fileone <- fileone %>% select(`position.#`, site.name, study.id, collection.date, aliquot.id)
colnames(fileone) <- c("position", "SiteName", "subject_id", "coll_date", "sample_id")
fileone$subject_id <- trimws(fileone$subject_id)
fileone$coll_date <- as.character(fileone$coll_date)
### site name checks
fileone$SiteName_check <- ifelse(fileone$SiteName %in% cdc_sites$SiteCode, 0, 1)
if (sum(fileone$SiteName_check, na.rm = TRUE) != 0){
print(each_file)
stop("There are incorrect site names in the manifest.")
} else {
fileone <- fileone %>% select(position, SiteName, subject_id, coll_date, sample_id)
}
#### additional check --- numbers to sites
### set of subject_id, sample_id, SiteName;
check_site_codes <- fileone %>% select(subject_id, sample_id, SiteName) %>% mutate(site_number = case_when(substr(subject_id, 1, 1) == "C" ~ as.numeric(substr(subject_id, 4, 5)),
T ~ as.numeric(substr(subject_id, 3, 4))))
check_site_codes <- merge(check_site_codes, cdc_sites, by.x = c("site_number"), by.y = c("Number"), all.x = TRUE)
if(any(is.na(check_site_codes$Institution))){
print(each_file)
stop("No Site Numerical Match")
}
check_site_codes$mismatch_sites <- ifelse(check_site_codes$SiteName != check_site_codes$SiteCode, 1, 0)
if(any(check_site_codes$mismatch_sites == 1)){
print(each_file)
print(filter(check_site_codes, mismatch_sites == 1))
print("Mismatched site code to name")
}
# add in 2 new columns: received_date and received_source (from file name)
#rec_date <- trimws(as.character(strsplit(each_file, "_")[[1]][2]))
#rec_date <- paste0(substr(rec_date, 1, 4), "-", substr(rec_date, 5, 6), "-", substr(rec_date, 7, 8))
fileone$received_date <- date_from_file(each_file)
rec_source <- trimws(as.character(strsplit(each_file, "_")[[1]][1]))
fileone$received_source <- rec_source
### add in "regular" manifest columns
fileone$flag <- NA
### re-arrange variables
fileone <- fileone %>% select(position, sample_id, subject_id, coll_date, flag, received_date, received_source, SiteName)
}
cdc_ivy_storage <- rbind(cdc_ivy_storage, fileone)
}
each_file
#print("IVY4")
#print(each_file)
fileone <- read.xlsx(paste0(cdcivy_manifest_fp, "/", each_file), sheet = 1, detectDates = TRUE)
fileone <- filter(fileone, !is.na(as.numeric(`Position.#`)))
## change all column names to lowercase and remove leading/lagging white space
## to make it easier to process
cdc_names <- colnames(fileone)
new_names <- c()
for (i in cdc_names){
new_names <- c(new_names, tolower(trimws(i)))
}
colnames(fileone) <- new_names
## keep full set of cdc ivy rows separate, for back checks on full data
full_ivy4 <- rbind(full_ivy4, fileone)
source(paste0(code_path, "manifest_code.R"))
source(paste0(code_path, "manifest_code.R"))
source(paste0(code_path, "plate_map_code.R"))
source(paste0(code_path, "plate_map_code.R"))
source(paste0(code_path, "pangolin_code.R"))
source(paste0(code_path, "pangolin_code.R"))
source(paste0(code_path, "nextclade_code.R"))
source(paste0(code_path, "gisaid_code.R"))
source(paste0(code_path, "compile_components_code.R"))

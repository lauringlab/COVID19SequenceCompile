source(paste0(code_path, "manifest_code.R"))
source(paste0(code_path, "plate_map_code.R"))
# note: this doesn't run if any plate map excel files are open
source(paste0(code_path, "pangolin_code.R"))
source(paste0(code_path, "nextclade_code.R"))
source(paste0(code_path, "gisaid_code.R"))
source(paste0(code_path, "compile_components_code.R"))
################################################################################
#          Creation of RVTN Upload Dataset for COVID-19 Genetic Sampling       #
#                         Last Updated: 03/07/2022                             #
#                 Code Edited By: Julie (Jules) Gilbert                        #
################################################################################
library(tidyverse)
library(lubridate)
################################################################################
starting_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/"
outputLOC <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/RVTN_UPLOADS/")
seq_list <- read.csv(paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
################################################################################
seq_list <- seq_list %>% select(sample_id, subject_id, coll_date,
flag, received_source, SiteName, SampleBarcode,
PlateDate, PlatePlatform, PlateNumber,
pangolin_lineage, pangolin_probability, pangolin_status,
pangolin_note, nextclade_clade, nextclade_totalMissing,
nextclade_completeness, gisaid_strain, gisaid_epi_isl,
received_date, position,
PlateName, PlatePosition, SampleSourceLocation,
pangoLEARN_version, pangolin_conflict, pango_version,
pangolin_version, pangolin_runDate, PlateToPangolin_days,
nextclade_qcOverallScore, nextclade_qcOverallStatus, nextclade_totalMutations,
nextclade_totalNonACGTNs, nextclade_runDate, PlateToNextclade_days)
seq_list <- filter(seq_list, received_source == "RVTN")
if (length(unique(seq_list$sample_id)) != nrow(seq_list)){
stop("Duplicate sample IDs - handle accordingly")
}
################################################################################
### fix date formatting
seq_list <- seq_list %>% mutate(coll_date = case_when(grepl("/", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%m/%d/%Y")),
grepl("-", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%Y-%m-%d")),
T ~ NA_character_))
colnames(seq_list) <- tolower(colnames(seq_list))
# add leading zero to month
if (nchar(month(Sys.Date())) == 1){
m <- paste0("0", month(Sys.Date()))
} else {
m <- month(Sys.Date())
}
# add leading zero to day
if (nchar(day(Sys.Date())) == 1){
d <- paste0("0", day(Sys.Date()))
} else {
d <- day(Sys.Date())
}
today <- paste0(year(Sys.Date()), m, d)
rvtn <- seq_list %>% select(sample_id, subject_id, coll_date,
flag, received_source, sitename, samplebarcode,
platedate, plateplatform, platenumber,
pangolin_lineage, pangolin_status,
pangolin_note, nextclade_clade, nextclade_totalmissing,
nextclade_completeness, gisaid_strain, gisaid_epi_isl,
received_date, position, platename, plateposition, samplesourcelocation,
pangolearn_version,
pango_version, pangolin_version,  nextclade_qcoverallscore, nextclade_qcoverallstatus,
nextclade_totalmutations, nextclade_totalnonacgtns)
#seq_list <- filter(seq_list, platenumber <= 49)
write.csv(rvtn, paste0(outputLOC, "rvtn_", today, ".csv"), row.names = FALSE, na = "")
library(tidyverse)
library(lubridate)
################################################################################
starting_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/"
outputLOC <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/CDC_IVY_UPLOADS/")
seq_list <- read.csv(paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
seq_list_o <- read.csv(paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
################################################################################
seq_list <- seq_list %>% select(sample_id, subject_id, coll_date,
flag, received_source, SiteName, SampleBarcode,
PlateDate, PlatePlatform, PlateNumber,
pangolin_lineage, pangolin_probability, pangolin_status,
pangolin_note, nextclade_clade, nextclade_totalMissing,
nextclade_completeness, gisaid_strain, gisaid_epi_isl,
received_date, position,
PlateName, PlatePosition, SampleSourceLocation,
pangoLEARN_version, pangolin_conflict, pango_version,
pangolin_version, pangolin_runDate, PlateToPangolin_days,
nextclade_qcOverallScore, nextclade_qcOverallStatus, nextclade_totalMutations,
nextclade_totalNonACGTNs, nextclade_runDate, PlateToNextclade_days)
seq_list_o <- seq_list_o %>% select(sample_id, subject_id, coll_date,
flag, received_source, SiteName, SampleBarcode,
PlateDate, PlatePlatform, PlateNumber,
pangolin_lineage, pangolin_probability, pangolin_status,
pangolin_note, nextclade_clade, nextclade_totalMissing,
nextclade_completeness, gisaid_strain, gisaid_epi_isl,
received_date, position,
PlateName, PlatePosition, SampleSourceLocation,
pangoLEARN_version, pangolin_conflict, pango_version,
pangolin_version, pangolin_runDate, PlateToPangolin_days,
nextclade_qcOverallScore, nextclade_qcOverallStatus, nextclade_totalMutations,
nextclade_totalNonACGTNs, nextclade_runDate, PlateToNextclade_days)
seq_list <- filter(seq_list, received_source == "CDCIVY" | received_source == "CDCIVY4")
## check for CDC IVY 4 samples (start with 22, ivy 3 == 21)
if (any(substr(seq_list$subject_id, 1, 2) == 22)){
print("IVY 4 Samples Present, Need to separate for upload")
}
if (length(unique(seq_list$sample_id)) != nrow(seq_list)){
stop("Duplicate sample IDs - handle accordingly")
}
## remove study withdraws
seq_list <- filter(seq_list, flag != "Withdrawn from study")
################################################################################
### fix date formatting
seq_list <- seq_list %>% mutate(coll_date = case_when(grepl("/", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%m/%d/%Y")),
grepl("-", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%Y-%m-%d")),
T ~ NA_character_))
seq_list_o <- seq_list_o %>% mutate(coll_date = case_when(grepl("/", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%m/%d/%Y")),
grepl("-", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%Y-%m-%d")),
T ~ NA_character_))
################################################################################
# create portion for qPCR matching
qpcr <- seq_list %>% select(sample_id, subject_id, coll_date, PlateName, PlatePosition)
qpcr_full <- filter(seq_list_o, PlateName %in% unique(qpcr$PlateName)) %>% select(sample_id, subject_id, coll_date, PlateName, PlatePosition, received_source, flag)
pmc <- read.csv("/Users/juliegil/Documents/LauringLab_Code/plate_map_cross.csv")
hv <- read.csv("/Users/juliegil/Documents/LauringLab_Code/horizonal_vertical_by_plate.csv")
hv <- hv %>% select(processing.plate, order_plate)
# match plate to horiz/vertical arrangement
qpcr_full <- merge(qpcr_full, hv, by.x = c("PlateName"), by.y = c("processing.plate"), all.x = TRUE)
qpcr_full <- merge(qpcr_full, pmc, by.x = c("PlatePosition", "order_plate"), by.y = c("Slot", "PlateOrder"), all.x = TRUE)
qpcr_full$wellgrid <- paste0(qpcr_full$Letter, qpcr_full$Number)
qpcr_full <- qpcr_full %>% arrange(PlateName, Letter, Number)
write.csv(qpcr_full, "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/IVY_Locations/ivy_mapping.csv", row.names = FALSE, na = "")
################################################################################
# 6/18/2021 - no longer need this - will be doing full overwrite upload going forward
# After the first upload, we'll need to keep track of what has already been uploaded
# so we'll read in the full list, then read in the previous upload list, and only keep
# rows that are not in the previous upload list(s) to write out and upload the next time
# ivy_file_list <- list.files(pattern = "*.csv", path = paste0(outputLOC, "ARCHIVE/"))
#
# ivy_redcap <- data.frame()
# for (i in ivy_file_list){
#   one <- read.csv(paste0(outputLOC, "ARCHIVE/", i), colClasses = "character")
#   ivy_redcap <- rbind(ivy_redcap, one)
# }
#
# # select only rows from seqlist that are not in ivy_redcap
# combo <- anti_join(seq_list, ivy_redcap)
#length(unique(combo$sample_id))
#combo$flag <- ifelse(grepl("REDO", combo$SampleSourceLocation), "Re-run sample from batch #1", "")
################################################################################
colnames(seq_list) <- tolower(colnames(seq_list))
# add leading zero to month
if (nchar(month(Sys.Date())) == 1){
m <- paste0("0", month(Sys.Date()))
} else {
m <- month(Sys.Date())
}
# add leading zero to day
if (nchar(day(Sys.Date())) == 1){
d <- paste0("0", day(Sys.Date()))
} else {
d <- day(Sys.Date())
}
today <- paste0(year(Sys.Date()), m, d)
ivy3 <- filter(seq_list, substr(subject_id, 1, 2) == 21)
ivy4 <- filter(seq_list, substr(subject_id, 1, 2) == 22)
# change subject_id to study_id
ivy4 <- ivy4 %>% select(sample_id, subject_id, coll_date,
flag, received_source, sitename, samplebarcode,
platedate, plateplatform, platenumber,
pangolin_lineage, pangolin_status, pangolin_note,
nextclade_clade, nextclade_totalmissing, nextclade_completeness,
gisaid_strain, gisaid_epi_isl, received_date, position, platename,
plateposition, samplesourcelocation, pangolearn_version,
pango_version, pangolin_version, nextclade_qcoverallscore, nextclade_qcoverallstatus,
nextclade_totalmutations, nextclade_totalnonacgtns)
names(ivy4)[names(ivy4) == 'subject_id'] <- 'study_id'
#seq_list <- filter(seq_list, platenumber <= 49)
write.csv(ivy3, paste0(outputLOC, "cdc_ivy3_", today, ".csv"), row.names = FALSE, na = "")
write.csv(ivy4, paste0(outputLOC, "cdc_ivy4_", today, ".csv"), row.names = FALSE, na = "")
#table(seq_list$pangolin_lineage)
# 1) read in aPCR data
qPCR_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
colnames(qPCR_in)
qPCR_in <- pPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
#### code to combine qPCR data with IVY3 data
library(tidyverse)
library(reshape2)
qPCR_in <- dcast(qPCR_in, sample_id + subject_id ~ Target.Name, value.var = c("C."))
View(qPCR_in)
qPCR_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
colnames(qPCR_in)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
qPCR_in <- pPCR_in %>% mutate(Target.Name = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ "U"))
qPCR_in <- qPCR_in %>% mutate(Target.Name = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ "U"))
qPCR_in <- dcast(qPCR_in, sample_id + subject_id ~ Target.Name, value.var = c("C."))
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
colnames(qPCR_in)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
qPCR_in <- qPCR_in %>% mutate(Target.Name = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ "U"))
table(qPCR_in$Target.Name)
# 1) read in aPCR data
qPCR_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
#colnames(qPCR_in)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
table(qPCR_in$Target.Name)
qPCR_in <- qPCR_in %>% mutate(Target.Name2 = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ "U"))
table(qPCR_in$Target.Name, qPCR_in$Target.Name2)
qPCR_in <- qPCR_in %>% mutate(Target.Name2 = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ "U"),
Target.Name_length = nchar(Target.Name))
qPCR_in <- qPCR_in %>% mutate(Target.Name2 = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ Target.Name),
Target.Name_length = nchar(Target.Name))
table(qPCR_in$Target.Name, qPCR_in$Target.Name2)
# 1) read in aPCR data
qPCR_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
#colnames(qPCR_in)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
qPCR_in <- qPCR_in %>% mutate(Target.Name = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ Target.Name))
qPCR_in$C. <- as.numeric(qPCR_in$C.)
qPCR_in <- dcast(qPCR_in, sample_id + subject_id ~ Target.Name, value.var = c("C."))
qPCR_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
#colnames(qPCR_in)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
qPCR_in <- qPCR_in %>% mutate(Target.Name = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ Target.Name))
qPCR_in$C.2 <- as.numeric(qPCR_in$C.)
qPCR_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
#colnames(qPCR_in)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
qPCR_in <- qPCR_in %>% mutate(Target.Name = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ Target.Name))
#qPCR_in$C.2 <- as.numeric(qPCR_in$C.)
qPCR_in <- dcast(qPCR_in, sample_id + subject_id ~ Target.Name, value.var = c("C."))
colnames(qPCR_in) <- c("sample_id", "subject_id", "uom_ct_n", "uom_ct_sgn1")
# 3) then merge onto a cdc ivy 3 upload
ivy_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/CDC_IVY_UPLOADS/ARCHIVE/"
ivy_in <- read.csv(paste0(ivy_path, "cdc_ivy3_20220324.csv"))
ivy_in <- read.csv(paste0(ivy_path, "cdc_ivy3_20220324.csv"), colClasses = c("character"))
ivy_pcr <- merge(ivy_in, qPCR_in, by = c("sample_id", "subject_id"), all.x = TRUE)
hv <- read.csv("/Users/juliegil/Documents/LauringLab_Code/horizonal_vertical_by_plate.csv")
View(hv)
View(qpcr_full)
library(tidyverse)
library(lubridate)
#### First, read in qPCR results:
# get location of all qPCR result files
qpcr_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/qPCR_Output/"
# get name of each .csv file in qPCR folder location
file_list <- list.files(pattern = "*.csv", path = qpcr_loc)
flie.list
file_list
# set empty storage set
qPCR_data <- data.frame()
for (i in file_list){
# first item in the file name is the date the qPCR was run on;
# second item indicates qPCR results
# third, fourth, fifth, sixth = plate name that samples came from
# seventh = number indicating what info run contains (0 = full plate, 1 = first half, 2 = second half)
qPCR_rundate <- strsplit(i, "_")[[1]][1]
qPCR_plate_run <- paste0(strsplit(i, "_")[[1]][3], "_", strsplit(i, "_")[[1]][4], "_", strsplit(i, "_")[[1]][5], "_", strsplit(i, "_")[[1]][6], "_", strsplit(i, "_")[[1]][7])
qPCR_info_ind <- gsub("\\.csv", "", strsplit(i, "_")[[1]][8])
qPCR_datain <- read.csv(paste0(qpcr_loc, i), skip = 7)
#print(i)
#print(colnames(qPCR_datain))
qPCR_datain$qPCR_runDate1 <- qPCR_rundate
qPCR_datain$qPCR_plate_run1 <- qPCR_plate_run
qPCR_datain$qPCR_info_ind1 <- as.numeric(qPCR_info_ind)
qPCR_data <- merge(qPCR_data, qPCR_datain, all = TRUE)
}
filter(qPCR_data, grepl("66", qPCR_plate_run1))
qPCR_data <- qPCR_data %>% mutate(well_samplematch = case_when(qPCR_info_ind1 == 1 & substr(Well, 1, 1) %in% c("A", "B", "C", "D") ~ Well,
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "E" ~ paste0("A", gsub("E", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "F" ~ paste0("B", gsub("F", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "G" ~ paste0("C", gsub("G", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "H" ~ paste0("D", gsub("H", "", Well)),
T ~ "CHECK"))
View(qPCR_data)
filter(qPCR_data, grepl("66", qPCR_plate_run1))
ivy_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/IVY_Locations/"
ivy_data <- read.csv(paste0(ivy_loc, "ivy_mapping.csv"))
ivy_pcr <- merge(ivy_data, qPCR_data, by.x = c("PlateName", "wellgrid"), by.y = c("qPCR_plate_run1", "well_samplematch"))
View(ivy_pcr)
##### qPCR additions to CDC IVY data
### Julie (jules) Gilbert
### Code Date: 2021-11-15
library(tidyverse)
library(lubridate)
#### First, read in qPCR results:
# get location of all qPCR result files
qpcr_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/qPCR_Output/"
# get name of each .csv file in qPCR folder location
file_list <- list.files(pattern = "*.csv", path = qpcr_loc)
# set empty storage set
qPCR_data <- data.frame()
for (i in file_list){
# first item in the file name is the date the qPCR was run on;
# second item indicates qPCR results
# third, fourth, fifth, sixth = plate name that samples came from
# seventh = number indicating what info run contains (0 = full plate, 1 = first half, 2 = second half)
qPCR_rundate <- strsplit(i, "_")[[1]][1]
qPCR_plate_run <- paste0(strsplit(i, "_")[[1]][3], "_", strsplit(i, "_")[[1]][4], "_", strsplit(i, "_")[[1]][5], "_", strsplit(i, "_")[[1]][6], "_", strsplit(i, "_")[[1]][7])
qPCR_info_ind <- gsub("\\.csv", "", strsplit(i, "_")[[1]][8])
qPCR_datain <- read.csv(paste0(qpcr_loc, i), skip = 7)
#print(i)
#print(colnames(qPCR_datain))
qPCR_datain$qPCR_runDate1 <- qPCR_rundate
qPCR_datain$qPCR_plate_run1 <- qPCR_plate_run
qPCR_datain$qPCR_info_ind1 <- as.numeric(qPCR_info_ind)
qPCR_data <- merge(qPCR_data, qPCR_datain, all = TRUE)
}
qPCR_data <- qPCR_data %>% mutate(well_samplematch = case_when(qPCR_info_ind1 == 1 & substr(Well, 1, 1) %in% c("A", "B", "C", "D") ~ Well,
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "E" ~ paste0("A", gsub("E", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "F" ~ paste0("B", gsub("F", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "G" ~ paste0("C", gsub("G", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "H" ~ paste0("D", gsub("H", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) %in% c("E", "F", "G", "H") ~ Well,
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "A" ~ paste0("E", gsub("E", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "B" ~ paste0("F", gsub("F", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "C" ~ paste0("G", gsub("G", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "D" ~ paste0("H", gsub("H", "", Well)),
T ~ "CHECK"))
qPCR_data <- qPCR_data %>% mutate(well_samplematch = case_when(qPCR_info_ind1 == 1 & substr(Well, 1, 1) %in% c("A", "B", "C", "D") ~ Well,
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "E" ~ paste0("A", gsub("E", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "F" ~ paste0("B", gsub("F", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "G" ~ paste0("C", gsub("G", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "H" ~ paste0("D", gsub("H", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) %in% c("E", "F", "G", "H") ~ Well,
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "A" ~ paste0("E", gsub("A", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "B" ~ paste0("F", gsub("B", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "C" ~ paste0("G", gsub("C", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "D" ~ paste0("H", gsub("D", "", Well)),
T ~ "CHECK"))
ivy_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/IVY_Locations/"
ivy_data <- read.csv(paste0(ivy_loc, "ivy_mapping.csv"))
ivy_pcr <- merge(ivy_data, qPCR_data, by.x = c("PlateName", "wellgrid"), by.y = c("qPCR_plate_run1", "well_samplematch"))
ivy_pcr <- ivy_pcr %>% select(PlateName, sample_id, subject_id, coll_date, flag, wellgrid, Well,
`Target.Name`, Task, Reporter, Quencher, `C.`, `C..Mean`,
`C..SD`, Quantity, `Quantity.Mean`, `Quantity.SD`, `Automatic.Ct.Threshold`,
`Ct.Threshold`, `Automatic.Baseline`, `Baseline.Start`, `Baseline.End`,
Comments, HIGHSD, NOAMP, EXPFAIL, `qPCR_runDate1`, `qPCR_info_ind1`)
output_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
write.csv(ivy_pcr, paste0(output_loc, "ivy_qpcr_matched_output_20220324.csv"), row.names = FALSE, na = "")
##### qPCR additions to CDC IVY data
### Julie (jules) Gilbert
### Code Date: 2021-11-15
library(tidyverse)
library(lubridate)
#### First, read in qPCR results:
# get location of all qPCR result files
qpcr_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/qPCR_Output/"
# get name of each .csv file in qPCR folder location
file_list <- list.files(pattern = "*.csv", path = qpcr_loc)
# set empty storage set
qPCR_data <- data.frame()
for (i in file_list){
# first item in the file name is the date the qPCR was run on;
# second item indicates qPCR results
# third, fourth, fifth, sixth = plate name that samples came from
# seventh = number indicating what info run contains (0 = full plate, 1 = first half, 2 = second half)
qPCR_rundate <- strsplit(i, "_")[[1]][1]
qPCR_plate_run <- paste0(strsplit(i, "_")[[1]][3], "_", strsplit(i, "_")[[1]][4], "_", strsplit(i, "_")[[1]][5], "_", strsplit(i, "_")[[1]][6], "_", strsplit(i, "_")[[1]][7])
qPCR_info_ind <- gsub("\\.csv", "", strsplit(i, "_")[[1]][8])
qPCR_datain <- read.csv(paste0(qpcr_loc, i), skip = 7)
#print(i)
#print(colnames(qPCR_datain))
qPCR_datain$qPCR_runDate1 <- qPCR_rundate
qPCR_datain$qPCR_plate_run1 <- qPCR_plate_run
qPCR_datain$qPCR_info_ind1 <- as.numeric(qPCR_info_ind)
qPCR_data <- merge(qPCR_data, qPCR_datain, all = TRUE)
}
p66 <- filter(qPCR_data, grepl("66", qPCR_plate_run1))
View(p66)
table(p66$qPCR_info_ind1)
# get name of each .csv file in qPCR folder location
file_list <- list.files(pattern = "*.csv", path = qpcr_loc)
file_list
i <- file_list[1]
# first item in the file name is the date the qPCR was run on;
# second item indicates qPCR results
# third, fourth, fifth, sixth = plate name that samples came from
# seventh = number indicating what info run contains (0 = full plate, 1 = first half, 2 = second half)
qPCR_rundate <- strsplit(i, "_")[[1]][1]
qPCR_rundate
qPCR_plate_run <- paste0(strsplit(i, "_")[[1]][3], "_", strsplit(i, "_")[[1]][4], "_", strsplit(i, "_")[[1]][5], "_", strsplit(i, "_")[[1]][6], "_", strsplit(i, "_")[[1]][7])
qPCR_plate_run
qPCR_info_ind <- gsub("\\.csv", "", strsplit(i, "_")[[1]][8])
qPCR_info_ind
qPCR_datain <- read.csv(paste0(qpcr_loc, i), skip = 7)
#print(i)
#print(colnames(qPCR_datain))
qPCR_datain$qPCR_runDate1 <- qPCR_rundate
qPCR_datain$qPCR_plate_run1 <- qPCR_plate_run
qPCR_datain$qPCR_info_ind1 <- as.numeric(qPCR_info_ind)
qPCR_data <- merge(qPCR_data, qPCR_datain, all = TRUE)
View(qPCR_data)
table(qPCR_data$qPCR_plate_run1)
# get name of each .csv file in qPCR folder location
file_list <- list.files(pattern = "*.csv", path = qpcr_loc)
# set empty storage set
qPCR_data <- data.frame()
for (i in file_list){
#i <- file_list[1]
# first item in the file name is the date the qPCR was run on;
# second item indicates qPCR results
# third, fourth, fifth, sixth = plate name that samples came from
# seventh = number indicating what info run contains (0 = full plate, 1 = first half, 2 = second half)
qPCR_rundate <- strsplit(i, "_")[[1]][1]
qPCR_plate_run <- paste0(strsplit(i, "_")[[1]][3], "_", strsplit(i, "_")[[1]][4], "_", strsplit(i, "_")[[1]][5], "_", strsplit(i, "_")[[1]][6], "_", strsplit(i, "_")[[1]][7])
qPCR_info_ind <- gsub("\\.csv", "", strsplit(i, "_")[[1]][8])
qPCR_datain <- read.csv(paste0(qpcr_loc, i), skip = 7)
#print(i)
#print(colnames(qPCR_datain))
qPCR_datain$qPCR_runDate1 <- qPCR_rundate
qPCR_datain$qPCR_plate_run1 <- qPCR_plate_run
qPCR_datain$qPCR_info_ind1 <- as.numeric(qPCR_info_ind)
qPCR_data <- merge(qPCR_data, qPCR_datain, all = TRUE)
}
table(qPCR_data$qPCR_plate_run1)
# set empty storage set
qPCR_data <- data.frame()
n <- 1
for (i in file_list){
#i <- file_list[1]
# first item in the file name is the date the qPCR was run on;
# second item indicates qPCR results
# third, fourth, fifth, sixth = plate name that samples came from
# seventh = number indicating what info run contains (0 = full plate, 1 = first half, 2 = second half)
qPCR_rundate <- strsplit(i, "_")[[1]][1]
qPCR_plate_run <- paste0(strsplit(i, "_")[[1]][3], "_", strsplit(i, "_")[[1]][4], "_", strsplit(i, "_")[[1]][5], "_", strsplit(i, "_")[[1]][6], "_", strsplit(i, "_")[[1]][7])
qPCR_info_ind <- gsub("\\.csv", "", strsplit(i, "_")[[1]][8])
qPCR_datain <- read.csv(paste0(qpcr_loc, i), skip = 7)
#print(i)
#print(colnames(qPCR_datain))
qPCR_datain$qPCR_runDate1 <- qPCR_rundate
qPCR_datain$qPCR_plate_run1 <- qPCR_plate_run
qPCR_datain$qPCR_info_ind1 <- as.numeric(qPCR_info_ind)
if (n == 1){
qPCR_data <- rbind(qPCR_data, qPCR_datain)
} else {
qPCR_data <- merge(qPCR_data, qPCR_datain, all = TRUE)
}
n <- n + 1
}
table(qPCR_data$qPCR_plate_run1)
qPCR_data <- qPCR_data %>% mutate(well_samplematch = case_when(qPCR_info_ind1 == 1 & substr(Well, 1, 1) %in% c("A", "B", "C", "D") ~ Well,
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "E" ~ paste0("A", gsub("E", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "F" ~ paste0("B", gsub("F", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "G" ~ paste0("C", gsub("G", "", Well)),
qPCR_info_ind1 == 1 & substr(Well, 1, 1) == "H" ~ paste0("D", gsub("H", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) %in% c("E", "F", "G", "H") ~ Well,
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "A" ~ paste0("E", gsub("A", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "B" ~ paste0("F", gsub("B", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "C" ~ paste0("G", gsub("C", "", Well)),
qPCR_info_ind1 == 2 & substr(Well, 1, 1) == "D" ~ paste0("H", gsub("D", "", Well)),
T ~ "CHECK"))
ivy_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/IVY_Locations/"
ivy_data <- read.csv(paste0(ivy_loc, "ivy_mapping.csv"))
#######################
# then, match ivy data to qPCR info
ivy_pcr <- merge(ivy_data, qPCR_data, by.x = c("PlateName", "wellgrid"), by.y = c("qPCR_plate_run1", "well_samplematch"))
ivy_pcr <- ivy_pcr %>% select(PlateName, sample_id, subject_id, coll_date, flag, wellgrid, Well,
`Target.Name`, Task, Reporter, Quencher, `C.`, `C..Mean`,
`C..SD`, Quantity, `Quantity.Mean`, `Quantity.SD`, `Automatic.Ct.Threshold`,
`Ct.Threshold`, `Automatic.Baseline`, `Baseline.Start`, `Baseline.End`,
Comments, HIGHSD, NOAMP, EXPFAIL, `qPCR_runDate1`, `qPCR_info_ind1`)
output_loc <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
write.csv(ivy_pcr, paste0(output_loc, "ivy_qpcr_matched_output_20220324.csv"), row.names = FALSE, na = "")
library(tidyverse)
library(reshape2)
# 1) read in aPCR data
qPCR_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/8_QPCR_IVY/"
qPCR_in <- read.csv(paste0(qPCR_path, "ivy_qpcr_matched_output_20220324.csv"))
# 2) select subset of data and cast out to expected format
#colnames(qPCR_in)
qPCR_in <- qPCR_in %>% select(sample_id, subject_id, Target.Name, C.)
qPCR_in <- qPCR_in %>% mutate(Target.Name = case_when(Target.Name == "N" ~ "N1",
Target.Name == "SgN1" ~ "sgN1",
T ~ Target.Name))
#qPCR_in$C.2 <- as.numeric(qPCR_in$C.)
qPCR_in <- dcast(qPCR_in, sample_id + subject_id ~ Target.Name, value.var = c("C."))
colnames(qPCR_in) <- c("sample_id", "subject_id", "uom_ct_n", "uom_ct_sgn1")
# 3) then merge onto a cdc ivy 3 upload
ivy_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/CDC_IVY_UPLOADS/ARCHIVE/"
ivy_in <- read.csv(paste0(ivy_path, "cdc_ivy3_20220324.csv"), colClasses = c("character"))
ivy_pcr <- merge(ivy_in, qPCR_in, by = c("sample_id", "subject_id"), all.x = TRUE)

pangolin_lineage, pangolin_status, pangolin_note,
nextclade_clade, nextclade_totalmissing, nextclade_completeness,
gisaid_strain, gisaid_epi_isl, received_date, position, platename,
plateposition, samplesourcelocation, pangolearn_version,
pango_version, pangolin_version, nextclade_qcoverallscore, nextclade_qcoverallstatus,
nextclade_totalmutations, nextclade_totalnonacgtns)
names(ivy4)[names(ivy4) == 'subject_id'] <- 'study_id'
# change subject_id to study_id
ivy5 <- ivy5 %>% select(sample_id, subject_id, coll_date,
flag, received_source, sitename, samplebarcode,
platedate, plateplatform, platenumber,
pangolin_lineage, pangolin_status, pangolin_note,
nextclade_clade, nextclade_totalmissing, nextclade_completeness,
gisaid_strain, gisaid_epi_isl, received_date, position, platename,
plateposition, samplesourcelocation, pangolearn_version,
pango_version, pangolin_version, nextclade_qcoverallscore, nextclade_qcoverallstatus,
nextclade_totalmutations, nextclade_totalnonacgtns,
data_quality_rule, newest_pangolin_lineage, newest_pangolin_date)
#names(ivy5)[names(ivy5) == 'subject_id'] <- 'study_id'
#seq_list <- filter(seq_list, platenumber <= 49)
#write.csv(ivy3, paste0(outputLOC, "cdc_ivy3_", today, ".csv"), row.names = FALSE, na = "")
write.csv(ivy4, paste0(outputLOC, "cdc_ivy4_", today, ".csv"), row.names = FALSE, na = "")
write.csv(ivy5, paste0(outputLOC, "cdc_ivy5_", today, ".csv"), row.names = FALSE, na = "")
#table(seq_list$pangolin_lineage)
max(ivy5$coll_date)
max(ivy5$received_date)
library(tidyverse)
library(lubridate)
#### combining wwtp files for its share
library(tidyverse)
library(lubridate)
### read in files to combine
# file in location
fin_loc <- "C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Jules/ITS_SHARE/"
# norovirus
noro <- read.csv(paste0(fin_loc, "norov_wastewater_data_all_cities.csv"))
# covid
cov <- read.csv(paste0(fin_loc, "covid_wastewater_data_all_cities.csv"))
# solids
sol <- read.csv(paste0(fin_loc, "solid_wastewater_data_all_cities.csv"))
table(sol$variable)
table(sol$organism)
sol <- sol %>% mutate(organism = case_when(organism == "Monkeypox" ~ "Mpox",
T ~ organism))
table(sol$organism)
sol <- read.csv(paste0(fin_loc, "solid_wastewater_data_all_cities.csv"))
# only giving rsv, influenza a, mpox
sol <- filter(sol, organism %in% c("Influenza A", "Monkeypox", "RSV"))
sol <- sol %>% mutate(organism = case_when(organism == "Monkeypox" ~ "Mpox",
T ~ organism))
head(sol)
head(cov)
colnames(cov)
colnames(sol)
# norovirus
noro <- read.csv(paste0(fin_loc, "norov_wastewater_data_all_cities.csv"))
noro <- noro %>% mutate(neg_limit = NA_character_)
# covid
cov <- read.csv(paste0(fin_loc, "covid_wastewater_data_all_cities.csv"))
cov <- cov %>% mutate(neg_limit = NA_character_)
colnames(noro)
colnames(cov)
noro <- read.csv(paste0(fin_loc, "norov_wastewater_data_all_cities.csv"))
noro <- noro %>% mutate(neg_limit = NA_character_,
type = "INFLUENT",
variable = NA_character_,
value = NVnormalizedPMMoV,
city = City,
seven_day_rolling_average = sevendayavg_nvpmmov,
fourteen_day_rolling_average = fourteendayavg_nvpmmov)
noro <- noro %>% select(Date, type, variable, value, city, seven_day_rolling_average,
fourteen_day_rolling_average, diff_7, subtract_7,
diff_14, subtract_14, seven_trend_direction, fourteen_trend_direction,
thirty_days_ago, organism, neg_limit)
# covid
cov <- read.csv(paste0(fin_loc, "covid_wastewater_data_all_cities.csv"))
cov <- cov %>% mutate(neg_limit = NA_character_)
noro_plus_cov <- rbind(noro, cov)
colnames(noro_plus_cov)
# solids
sol <- read.csv(paste0(fin_loc, "solid_wastewater_data_all_cities.csv"))
# only giving rsv, influenza a, mpox
sol <- filter(sol, organism %in% c("Influenza A", "Monkeypox", "RSV"))
sol <- sol %>% mutate(organism = case_when(organism == "Monkeypox" ~ "Mpox",
T ~ organism))
colnames(sol)
sol <- sol %>% select(Date, type, variable, value, city, seven_day_rolling_average,
fourteen_day_rolling_average, diff_7, subtract_7,
diff_14, subtract_14, seven_trend_direction,
fourteen_trend_direction, thirty_days_ago, organism, neg_limit)
cov_noro_sol <- rbind(noro_plus_cov, sol)
table(cov_noro_sol$type)
table(cov_noro_sol$neg_limit)
colnames(cov_noro_sol)
table(cov_noro_sol$city)
table(cov_noro_sol$organism)
table(cov_noro_sol$neg_limit)
# separate solids data processing for internal dashboard
source("C:/Users/juliegil/Dropbox (University of Michigan)/SPH-COVID Response/Jules/wigginton_datapipeline_development/development.R")
shell.exec("C:/Users/juliegil/Documents/UofM_Work/poseidon_app/git_refresh_code/update_git_code.bat")
library(tidyverse)
library(lubridate)
################################################################################
starting_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/"
outputLOC <- paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/RVTN_UPLOADS/")
seq_list <- read.csv(paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
################################################################################
seq_list <- seq_list %>% select(sample_id, subject_id, coll_date,
flag, received_source, SiteName, SampleBarcode,
PlateDate, PlatePlatform, PlateNumber,
pangolin_lineage, pangolin_probability, pangolin_status,
pangolin_note, nextclade_clade, nextclade_totalMissing,
nextclade_completeness, gisaid_strain, gisaid_epi_isl,
received_date, position,
PlateName, PlatePosition, SampleSourceLocation,
pangoLEARN_version, pango_version,
pangolin_version, pangolin_conflict,
nextclade_qcOverallScore, nextclade_qcOverallStatus, nextclade_totalMutations,
nextclade_totalNonACGTNs,
data_quality_rule, newest_pangolin_lineage, newest_pangolin_date, sample_id_lauring)
seq_list <- filter(seq_list, received_source == "RVTN" & !grepl("Missing Date", flag))
if (length(unique(seq_list$sample_id)) != nrow(seq_list)){
stop("Duplicate sample IDs - handle accordingly")
}
################################################################################
### fix date formatting
seq_list <- seq_list %>% mutate(coll_date = case_when(grepl("/", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%m/%d/%Y")),
grepl("-", coll_date) ~ as.character(as.POSIXct(coll_date, format = "%Y-%m-%d")),
T ~ NA_character_))
#colnames(seq_list) <- tolower(colnames(seq_list))
# add leading zero to month
if (nchar(month(Sys.Date())) == 1){
m <- paste0("0", month(Sys.Date()))
} else {
m <- month(Sys.Date())
}
# add leading zero to day
if (nchar(day(Sys.Date())) == 1){
d <- paste0("0", day(Sys.Date()))
} else {
d <- day(Sys.Date())
}
today <- paste0(year(Sys.Date()), m, d)
rvtn <- seq_list %>% select(sample_id, subject_id, coll_date,
flag, received_source, SiteName, SampleBarcode,
PlateDate, PlatePlatform, PlateNumber,
pangolin_lineage, pangolin_probability, pangolin_status,
pangolin_note, nextclade_clade, nextclade_totalMissing,
nextclade_completeness, gisaid_strain, gisaid_epi_isl,
received_date, position,
PlateName, PlatePosition, SampleSourceLocation,
pangoLEARN_version, pango_version,
pangolin_version, pangolin_conflict,
nextclade_qcOverallScore, nextclade_qcOverallStatus, nextclade_totalMutations,
nextclade_totalNonACGTNs,
data_quality_rule, newest_pangolin_lineage, newest_pangolin_date, sample_id_lauring)
colnames(rvtn) <- c("sample_id", "subject_id", "coll_date",
"flag", "received_source", "sitename", "samplebarcode",
"platedate", "plateplatform", "platenumber",
"pangolin_lineage", "pangolin_probability", "pangolin_status",
"pangolin_note", "nextclade_clade", "nextclade_totalmissing",
"nextclade_completeness", "gisaid_strain", "gisaid_epi_isl",
"received_date", "position",
"platename", "plateposition", "samplesourcelocation",
"pangolearn_version", "pango_version",
"pangolin_version", "pangolin_conflict",
"nextclade_qcoverallscore", "nextclade_qcoverallstatus", "nextclade_totalmutations",
"nextclade_totalnonacgtns",
"data_quality_rule", "newest_pangolin_lineage", "newest_pangolin_date", "public_gisaid")
#seq_list <- filter(seq_list, platenumber <= 49)
write.csv(rvtn, paste0(outputLOC, "rvtn_", today, ".csv"), row.names = FALSE, na = "")
#### Read in influenza full file
flu_file <- read.csv(paste0("/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/",
"SEQUENCING/INFLUENZA_A/4_SequenceSampleMetadata/FinalSummary/",
"full_compiled_data.csv"), colClasses = c("character"))
rv_flu <- filter(flu_file, grepl("RVTN", received_source) & !grepl("Missing Date", flag))
colnames(rv_flu)
#### segment ids in as blanks currently
# cdc_flu <- cdc_flu %>% mutate(PB2.Segment_ID = "",
#                               PB1.Segment_ID = "",
#                               PA.Segment_ID = "",
#                               NP.Segment_ID = "",
#                               NA.Segment_ID = "",
#                               MP.Segment_ID = "",
#                               NS.Segment_ID = "")
rv_flu <- rv_flu %>% select(sample_id, subject_id, coll_date, flag, received_source,
received_date, SampleBarcode, PlateName, nextclade_HA_clade,
nextclade_HA_qcOverallScore, nextclade_HA_qcOverallStatus,
nextclade_HA_totalMutations, nextclade_HA_totalNonACGTNs,
nextclade_HA_type, Isolate_Id, PB2.Segment_Id, PB1.Segment_Id, PA.Segment_Id, HA.Segment_Id,
NP.Segment_Id, NA.Segment_Id, MP.Segment_Id, NS.Segment_Id, Isolate_Name)
colnames(rv_flu) <- c("sample_id", "subject_id", "coll_date_flu", "flag_flu",
"received_source_flu", "received_date_flu", "sample_barcode_flu",
"plate_name_flu", "nextclade_ha_clade_flu", "nextclade_ha_qcoverallscore_flu",
"nextclade_ha_qcoverallstatus_flu", "nextclade_ha_totalmutations_flu",
"nextclade_ha_totalnonacgtns_flu", "nextclade_ha_type_flu", "isolate_id_flu", "pb2_segment_id_flu",
"pb1_segment_id_flu", "pa_segment_id_flu", "ha_segment_id_flu", "np_segment_id_flu",
"na_segment_id_flu", "mp_segment_id_flu", "ns_segment_id_flu", "isolate_name_flu")
today_date <- gsub("-", "", Sys.Date())
write.csv(rv_flu, paste0("/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/",
"SEQUENCING/INFLUENZA_A/4_SequenceSampleMetadata/FinalSummary/",
"RVTN_uploads/rvtn_flu_", today_date, ".csv"), row.names = FALSE, na = "")
View(rv_flu)
library(tidyverse)
library(lubridate)
library(openxlsx)
### flu format for CEIRR/iDPCC
place1 <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/INFLUENZA_A/"
plate_run_use <- "20230112_IAV_Illumina_Run_40_SETD" ## UHS
flu_data <- read.csv(paste0(place1, "4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = c("character"))
table(flu_data$PlateName)
library(tidyverse)
library(lubridate)
library(openxlsx)
### flu format for CEIRR/iDPCC
place1 <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/INFLUENZA_A/"
plate_run_use <- "20230112_IAV_Illumina_Run_40_SETD" ## UHS
flu_data <- read.csv(paste0(place1, "4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = c("character"))
flu_data <- filter(flu_data, PlateName == plate_run_use & received_source %in% c("UHS", "CBR"))
flu_data <- filter(flu_data, !grepl("Missing Date in Manifest", flag))
flu_data <- filter(flu_data, !grepl("Duplicate Sample", flag))
# remove controls
flu_data <- filter(flu_data, !grepl("_HeLa_", sample_id) & !grepl("_NC_", sample_id) & !grepl("_NC", sample_id))
# remove anything without nextclade designations
flu_data <- filter(flu_data, nextclade_HA_clade != "")
table(flu_data$received_source)
plate_run_use <- "20230112_IAV_Illumina_Run_40" ## UHS
place_out <- paste0(place1, "3_ProcessedGenomes/", plate_run_use, "/Segment_sequences/")
file_out <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/External_Projects_DataRequests/INFLUENZA/CEIRR_Format/to_submit/"
flu_data <- flu_data %>% mutate(Project_Identifier = case_when(received_source == "CBR" ~ "SP3-Lauring_7102",
received_source == "UHS" ~ "SP3-Lauring_7102",
T ~ "STOP"),
BioProject_Accession_Number = case_when(received_source == "CBR" ~ "PRJNA818282",
received_source == "UHS" ~ "PRJNA818282",
T ~ "STOP"))
if (any(flu_data$Project_Identifier == "STOP") | any(flu_data$BioProject_Accession_Number == "STOP")){
stop("Proper received source and identifier code(s) not aligned")
}
flu_data$Contributing_Institution <- "PEN214"
flu_data$Sample_Identifier <- flu_data$sample_id
flu_data$Embargo_End_Date <- "NA"
flu_data$Provisional_Authors <- "William Fitzsimmons, Emily Bendall, Julie Gilbert, Adam Lauring"
flu_data$Submission_Title <- "Human Influenza Virus Surveillance Michigan"
flu_data$Publication_PMID <- "NA"
flu_data$Molecule_Type <- "viral cRNA" #x
if (grepl("Nanopore", plate_run_use)){
# nanopore re-runs
flu_data$Sequencing_Technology <- "Oxford Nanopore" #x
} else {
# new & going forward
flu_data$Sequencing_Technology <- "Illumina"
}
flu_data$Forward_Primer <- "Uni12/Inf1: GGGGGGAGCAAAAGCAGG, Uni12/Inf3: GGGGGGAGCGAAAGCAGG" #x
flu_data$Reverse_Primer <- "Uni13/Inf1: CGGGTTATTAGTAGAAACAAGG" #x
if (grepl("Nanopore", plate_run_use)){
# nanopore re-runs
flu_data$Assembly_Method <- "samtools BWA"
flu_data$Assembler_Version <- "1.15.1 0.7.17"
} else {
# illumina new & going forward
flu_data$Assembly_Method <- "IRMA" #x
flu_data$Assembler_Version <- "v.0.6.1" #x
}
flu_data$Coverage <- "U" #x
flu_data$Genbank_Accession_Numbers <- "NA" #x
flu_data$Strain_Name <- paste0(flu_data$Isolate_Name, ifelse(flu_data$nextclade_HA_type == "H3" & flu_data$Isolate_Name != "", " (H3N2)",
ifelse(flu_data$nextclade_HA_type == "H1" & flu_data$Isolate_Name != "", " (H1N1)", ""))) #x
flu_data$Sample_Material <- "NPH" #x
flu_data$Surveillance_Sample <- "Y" #x
flu_data$Host_Species <- "Homo sapiens" #x
flu_data$Host_Common_Name <- "Human" #x
flu_data$Collection_Date <- format(as_date(flu_data$coll_date), "%d-%b-%Y") #x
flu_data$Collection_Country <- "USA" #x
flu_data$Lab_Host <- "Human" #x
flu_data$Parent_Strain_Name <- flu_data$Strain_Name #x
flu_data$Passage_History <- "ORI" #x
flu_data$Antigenic_Characterization <- "NA" #x
flu_data$Treatment <- "NA" #x
flu_data$Transmission_Method <- "NA" #x
flu_data$Severity <- "NA" #x
flu_data$Phenotype <- "NA" #x
flu_data$Comments <- "NA" #x
flu_data$File_Name <- paste0(flu_data$sample_id, ".fasta") #x
#flu_data$Organism <- NA_character_
#flu_data$Locus_Tag_Prefix <- NA_character_
# select all the necessary variables in correct order
output_flu <- flu_data %>% select(Project_Identifier, Contributing_Institution,
Sample_Identifier, BioProject_Accession_Number, Embargo_End_Date, Provisional_Authors,
Submission_Title, Publication_PMID, Molecule_Type, Sequencing_Technology, Forward_Primer,
Reverse_Primer, Assembly_Method, Assembler_Version, Coverage,
Genbank_Accession_Numbers, Strain_Name, Sample_Material, Surveillance_Sample,
Host_Species, Host_Common_Name, Collection_Date, Collection_Country,
Lab_Host, Parent_Strain_Name, Passage_History, Antigenic_Characterization,
Treatment, Transmission_Method, Severity, Phenotype,
Comments, File_Name)
output_flu <- filter(output_flu, Parent_Strain_Name != "")
write.csv(select(output_flu, Sample_Identifier), paste0(place_out, "ceirr_out.csv"), row.names = FALSE, na = "")
# add header
header_string <- "#DataTemplate:Submission for Sequence Metadata v2.3"
# write header to .csv file
write.table(header_string, file = paste0(file_out, "ceirr_lauring_", gsub("-", "", Sys.Date()),  ".csv"), row.names =FALSE, col.names = FALSE,sep = ",", append = TRUE)
# then write the rest of the data file
write.table(output_flu, file = paste0(file_out, "ceirr_lauring_", gsub("-", "", Sys.Date()),  ".csv"), row.names =FALSE, col.names = TRUE,sep = ",", append = TRUE)
#### ascension to mdss upload
#### julie (jules) gilbert
#### 2022-10-25
library(tidyverse)
library(lubridate)
start_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/"
#### read in manifests in full
asc_manifests <- list.files(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/ASCENSION/ASCENSION_MDSS"))
asc_full_manifests <- data.frame()
for (i in asc_manifests){
asc_in <- read.csv(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/ASCENSION/ASCENSION_MDSS/", i), colClasses = "character")
asc_full_manifests <- rbind(asc_full_manifests, asc_in)
}
#### read in full sars-cov-2
sc2_list <- read.csv(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
#### filter down to samples
asc_samples <- filter(sc2_list, received_source %in% c("ASC", "ASJ")
& PlateName %in% c("20230816_SC2_Nanopore_Run_338"))
#### only send things that have gisaid back
asc_samples <- filter(asc_samples,  as.numeric(nextclade_completeness) >= 90)
asc_samples <- filter(asc_samples, !grepl("Missing Date in Manifest", flag))
asc_samples <- filter(asc_samples, !sample_id %in% c("7670091", "7683289", "7676634"))
# select subset of columns
asc_samples <- asc_samples %>% select(subject_id, sample_id, coll_date, pangolin_lineage)
# check for unassigned, remove if they are there
table(asc_samples$pangolin_lineage, useNA = "always")
#### read in full sars-cov-2
sc2_list <- read.csv(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
table(sc2_list$PlateName)
#### filter down to samples
asc_samples <- filter(sc2_list, received_source %in% c("ASC", "ASJ")
& PlateName %in% c("20230816_SC2_Nanopore_Run_338"))
View(asc_samples)
#### julie (jules) gilbert
#### 2022-10-25
library(tidyverse)
library(lubridate)
start_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/"
#### read in manifests in full
hfhs_manifests <- list.files(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/HENRYFORD/HFHS_MDSS"), pattern = "*.csv")
hfhs_full_manifests <- data.frame()
for (i in hfhs_manifests){
hfhs_in <- read.csv(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/HENRYFORD/HFHS_MDSS/", i), colClasses = "character")
hfhs_in$fname <- i
hfhs_full_manifests <- rbind(hfhs_full_manifests, hfhs_in)
}
hfhs_full_manifests <- filter(hfhs_full_manifests, RESULT %in% c("DETECTED", "Positive/Detected", "NULL") & ACCESSION_ID != "NULL")
#### read in full sars-cov-2
sc2_list <- read.csv(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
#### filter down to samples
hfhs_samples <- filter(sc2_list, received_source == "HFHS"
& PlateName %in% c("20230731_SC2_Nanopore_Run_336", "20230816_SC2_Nanopore_Run_338"))
#### only send things that have gisaid back
hfhs_samples <- filter(hfhs_samples,  as.numeric(nextclade_completeness) >= 90)
hfhs_samples <- filter(hfhs_samples, !grepl("Missing Date in Manifest", flag))
# select subset of columns
hfhs_samples <- hfhs_samples %>% select(subject_id, sample_id, coll_date, pangolin_lineage)
# check for unassigned, remove if they are there
table(hfhs_samples$pangolin_lineage, useNA = "always")
# create full dataset
# sample id = 007023262 (9 digits)
#asc_full_manifests$SID <- as.numeric(asc_full_manifests$SID)
#asc_samples$sample_id <- as.numeric(asc_samples$sample_id)
together <- merge(hfhs_full_manifests, hfhs_samples, by.x = c("SID"), by.y = c("sample_id"))
#### ascension to mdss upload
#### julie (jules) gilbert
#### 2022-10-25
library(tidyverse)
library(lubridate)
start_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/"
#### read in manifests in full
hfhs_manifests <- list.files(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/HENRYFORD/HFHS_MDSS"), pattern = "*.csv")
hfhs_full_manifests <- data.frame()
for (i in hfhs_manifests){
hfhs_in <- read.csv(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/HENRYFORD/HFHS_MDSS/", i), colClasses = "character")
hfhs_in$fname <- i
hfhs_full_manifests <- rbind(hfhs_full_manifests, hfhs_in)
}
hfhs_full_manifests <- filter(hfhs_full_manifests, RESULT %in% c("DETECTED", "Positive/Detected", "NULL") & ACCESSION_ID != "NULL")
#### read in full sars-cov-2
sc2_list <- read.csv(paste0(start_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"), colClasses = "character")
#### filter down to samples
hfhs_samples <- filter(sc2_list, received_source == "HFHS"
& PlateName %in% c("20230731_SC2_Nanopore_Run_336", "20230816_SC2_Nanopore_Run_338"))
#### only send things that have gisaid back
hfhs_samples <- filter(hfhs_samples,  as.numeric(nextclade_completeness) >= 90)
hfhs_samples <- filter(hfhs_samples, !grepl("Missing Date in Manifest", flag))
# select subset of columns
hfhs_samples <- hfhs_samples %>% select(subject_id, sample_id, coll_date, pangolin_lineage)
# check for unassigned, remove if they are there
table(hfhs_samples$pangolin_lineage, useNA = "always")
# create full dataset
# sample id = 007023262 (9 digits)
#asc_full_manifests$SID <- as.numeric(asc_full_manifests$SID)
#asc_samples$sample_id <- as.numeric(asc_samples$sample_id)
together <- merge(hfhs_full_manifests, hfhs_samples, by.x = c("SID"), by.y = c("sample_id"))
View(together)
together <- together[2:100, ]
# rename for result
together$RESULT <- together$pangolin_lineage
# reported date
together$REPORTED_DATE <- gsub("-", "", Sys.Date())
# edit LOINC code if necessary
#together <- together %>% mutate(TEST_LOINC = case_when(TEST_LOINC == "100157-7" ~ "96741-4",
#                                                       T ~ TEST_LOINC))
together <- together %>% mutate(PATIENT_STATE = case_when(nchar(PATIENT_STATE) > 2 ~ state.abb[match(PATIENT_STATE,state.name)],
T ~ PATIENT_STATE),
TEST_LOINC = case_when(trimws(TEST_LOINC) != "96741-4" ~ "96741-4",
T ~ trimws(TEST_LOINC)),
TEST_NAME = case_when(trimws(TEST_NAME) != "SARS-CoV-2 (COVID-19) variant [Type] in Specimen by Sequencing" ~ "SARS-CoV-2 (COVID-19) variant [Type] in Specimen by Sequencing",
T ~ TEST_NAME),
PROVIDER_FNAME = trimws(sub(".*,", "", PROVIDER_LNAME)),
PROVIDER_LNAME = trimws(sub(",.*", "", PROVIDER_LNAME)),
PROVIDER_STATE = case_when(nchar(PROVIDER_STATE) > 2 ~ state.abb[match(PROVIDER_STATE,state.name)],
T ~ PROVIDER_STATE),
PATIENT_ADDR1 = gsub("\\.", "", PATIENT_ADDR1),
PATIENT_ADDR1 = gsub("\\,", "", PATIENT_ADDR1),
PATIENT_ADDR2 = gsub("#", "", PATIENT_ADDR2),
PATIENT_ADDR2 = gsub("/", "", PATIENT_ADDR2),
#PROVIDER_ADDRESS1 = PROVIDER_ADDR1,
#PROVIDER_ADDRESS2 = PROVIDER_ADDR2,
ACCESSION_ID = SID,
CLIAID = "23D0366712")
together <- together %>% select(CLIAID, PATIENT_LNAME, PATIENT_FNAME, PATIENT_MNAME,
PATIENT_ADDR1, PATIENT_ADDR2, PATIENT_CITY, PATIENT_STATE,
PATIENT_ZIP, PATIENT_COUNTY, PATIENT_PHONE, PATIENT_DOB,
PATIENT_SEX, PATIENT_RACE, PATIENT_ETHNICITY, PATIENT_MRN,
ACCESSION_ID, SPECIMEN_SOURCE, TEST_NAME, TEST_LOINC,
RESULT, SPECIMEN_COLLECTION_DATE, ORDER_DATE, ORDERING_FACILITY,
PROVIDER_LNAME, PROVIDER_FNAME, PROVIDER_PHONE, PROVIDER_ADDRESS1,
PROVIDER_ADDRESS2, PROVIDER_CITY, PROVIDER_STATE, PROVIDER_ZIP,
REPORTED_DATE)
together <- together %>%  mutate_all(~sub(",.*", "", .))
together <- together %>%  mutate_all(~sub("/", "", .))
together <- together %>%  mutate_all(~sub("/", "", .))
together <- together %>%  mutate_all(~sub("&", "", .))
#together <- together %>%  mutate(PATIENT_CITY = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_CITY, perl=TRUE),
#                                 PATIENT_ADDR1 = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_ADDR1, perl=TRUE),
#                                 PATIENT_ADDR2 = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_ADDR2, perl=TRUE),
#                                 PATIENT_STATE = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_STATE, perl=TRUE),
#                                 PROVIDER_FNAME = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PROVIDER_FNAME, perl=TRUE))
#together$CLIAID <- "23D0366712"
together <- together %>% distinct()
write.csv(together, paste0(start_path, "External_Projects_DataRequests/SARSCOV2/HFHS_To_MDSS/mdsshfhs_upload_", gsub("-", "", Sys.Date()), ".csv"), row.names = FALSE, na = "", quote = FALSE)
#### trinity to mdss upload
#### julie (jules) gilbert
#### 2022-09-15
library(tidyverse)
library(lubridate)
starting_path <- "/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/"
#### read in mdhhs manifest in full
trinity_manifest <- read.csv(paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/TRINITY/ARCHIVE/full_trinity_manifest_info22.csv"))
#trinity_manifest2 <- read.csv("/Users/juliegil/Dropbox (University of Michigan)/MED-LauringLab/SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/Manifests/TRINITY/ARCHIVE/full_trinity_manifest_info.csv")
#trinity_manifest <- rbind(trinity_manifest, trinity_manifest2) %>% distinct()
#### read in full sars-cov-2
sc2_list <- read.csv(paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"))
#### filter down to mdhhs samples
trinity_samples <- filter(sc2_list, received_source == "TRINITY"
& PlateName %in% c("20230731_SC2_Nanopore_Run_336", "20230816_SC2_Nanopore_Run_338", "20230731_SC2_Illumina_Run_114"))
#### read in full sars-cov-2
sc2_list <- read.csv(paste0(starting_path, "SEQUENCING/SARSCOV2/4_SequenceSampleMetadata/FinalSummary/full_compiled_data.csv"))
table(sc2_list$PlateName)
#### only send things that have gisaid back
#mdhhs_samples <- filter(mdhhs_samples, gisaid_epi_isl != "")
trinity_samples <- filter(trinity_samples,  as.numeric(nextclade_completeness) >= 90)
trinity_samples <- filter(trinity_samples, !grepl("Missing Date in Manifest", flag))
# select subset of columns
#  gisaid_epi_isl
trinity_samples <- trinity_samples %>% select(subject_id, sample_id, coll_date, pangolin_lineage)
# check for unassigned, remove if they are there
table(trinity_samples$pangolin_lineage, useNA = "always")
# create full dataset
together <- merge(trinity_manifest, trinity_samples, by.x = c("SID"), by.y = c("sample_id"))
colnames(together)
# rename for result
together$RESULT <- together$pangolin_lineage
# reported date
together$REPORTED_DATE <- gsub("-", "", Sys.Date())
together <- together %>% mutate(PATIENT_STATE = case_when(nchar(PATIENT_STATE) > 2 ~ state.abb[match(PATIENT_STATE,state.name)],
T ~ PATIENT_STATE),
TEST_LOINC = case_when(trimws(TEST_LOINC) != "96741-4" ~ "96741-4",
T ~ trimws(TEST_LOINC)),
TEST_NAME = case_when(trimws(TEST_NAME) != "SARS-CoV-2 (COVID-19) variant [Type] in Specimen by Sequencing" ~ "SARS-CoV-2 (COVID-19) variant [Type] in Specimen by Sequencing",
T ~ TEST_NAME),
PROVIDER_FNAME = trimws(sub(".*,", "", PROVIDER_LNAME)),
PROVIDER_LNAME = trimws(sub(",.*", "", PROVIDER_LNAME)),
PROVIDER_STATE = case_when(nchar(PROVIDER_STATE) > 2 ~ state.abb[match(PROVIDER_STATE,state.name)],
T ~ PROVIDER_STATE),
PATIENT_ADDR1 = gsub("\\.", "", PATIENT_ADDR1),
PATIENT_ADDR1 = gsub("\\,", "", PATIENT_ADDR1),
ACCESSION_ID = SID,
CLIAID = "23D0366712")
together <- together %>% select(CLIAID, PATIENT_LNAME, PATIENT_FNAME, PATIENT_MNAME,
PATIENT_ADDR1, PATIENT_ADDR2, PATIENT_CITY, PATIENT_STATE,
PATIENT_ZIP, PATIENT_COUNTY, PATIENT_PHONE, PATIENT_DOB,
PATIENT_SEX, PATIENT_RACE, PATIENT_ETHNICITY, PATIENT_MRN,
ACCESSION_ID, SPECIMEN_SOURCE, TEST_NAME, TEST_LOINC,
RESULT, SPECIMEN_COLLECTION_DATE, ORDER_DATE, ORDERING_FACILITY,
PROVIDER_LNAME, PROVIDER_FNAME, PROVIDER_PHONE, PROVIDER_ADDRESS1,
PROVIDER_ADDRESS2, PROVIDER_CITY, PROVIDER_STATE, PROVIDER_ZIP,
REPORTED_DATE)
together <- together %>%  mutate_all(~sub(",.*", "", .))
together <- together %>%  mutate(PATIENT_CITY = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_CITY, perl=TRUE),
PATIENT_ADDR1 = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_ADDR1, perl=TRUE),
PATIENT_ADDR2 = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_ADDR2, perl=TRUE),
PATIENT_STATE = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PATIENT_STATE, perl=TRUE),
PROVIDER_FNAME = gsub(pattern="\r?\n(?!NCT)",replacement=" ",x = PROVIDER_FNAME, perl=TRUE))
together <- together %>% mutate(TEST_NAME = "SARS-COV2-RNA QUALITATIVE REAL-TIME RT-PCR LOCAL REFERENCE LAB")
write.csv(together, paste0(starting_path, "External_Projects_DataRequests/SARSCOV2/Trinity_to_MDSS/mdsstrin_upload_", gsub("-", "", Sys.Date()), ".csv"), row.names = FALSE, na = "", quote = FALSE)
